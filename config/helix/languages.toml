# https://github.com/helix-editor/helix/wiki/How-to-install-the-default-language-servers

[language-server.scls]
command = "simple-completion-language-server"

[language-server.scls.config]
max_completion_items = 20     # set max completion results len for each group: words, snippets, unicode-input
snippets_first = true         # completions will return before snippets by default
feature_words = true          # enable completion by word
feature_snippets = true       # enable snippets
feature_unicode_input = true  # enable "unicode input"


# write logs to /tmp/completion.log
[language-server.scls.environment]
RUST_LOG = "info,simple-completion-langauge-server=info"
LOG_FILE = "/tmp/completion.log"

[[language]]
name = "rust"
language-servers = [ "scls", "rust-analyzer" ]

[language-server.rust-analyzer.config]
check = { command = "clippy" }
hover = { actions = { enable = true } }
# typing = { autoClosingAngleBrackets = { enable = true } }
auto-format = true
checkOnSave = {command = "clippy"}

[[language]]
name = "toml"
auto-format = true

[[language]]
name = "markdown"
formatter = { command = "dprint", args = ["fmt", "--stdin", "md"]}

[[language]]
name = "typescript"
language-servers = [  "typescript-language-server", "tailwindcss-react", "eslint", "emmet-ls", "scls", "graphql"]
formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
indent = { tab-width = 4, unit = "\t" }
auto-format = true

[language-server.typescript-language-server.config]
documentFormatting = false
hostInfo = "helix"

[language-server.typescript-language-server.config.typescript.inlayHints]
includeInlayEnumMemberValueHints = true
includeInlayFunctionLikeReturnTypeHints = true
includeInlayFunctionParameterTypeHints = true
includeInlayParameterNameHints = "all"
includeInlayParameterNameHintsWhenArgumentMatchesName = true
includeInlayPropertyDeclarationTypeHints = true
includeInlayVariableTypeHints = true

[language-server.typescript-language-server.config.completions]
completeFunctionCalls = true

[language-server.typescript-language-server.config.javascript.inlayHints]
includeInlayEnumMemberValueHints = true
includeInlayFunctionLikeReturnTypeHints = true
includeInlayFunctionParameterTypeHints = true
includeInlayParameterNameHints = "all"
includeInlayParameterNameHintsWhenArgumentMatchesName = true
includeInlayPropertyDeclarationTypeHints = true
includeInlayVariableTypeHints = true

[[language]]
name = "tsx"
language-servers = [ "typescript-language-server", "tailwindcss-react", "eslint", "emmet-ls", "scls", "graphql"]
formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
indent = { tab-width = 4, unit = "\t" }
auto-format = true

[[language]]
name = "jsx"
language-servers = [ "typescript-language-server", "tailwindcss-react", "eslint", "emmet-ls","scls", "graphql"]
grammar = "javascript"
formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
indent = { tab-width = 4, unit = "\t" }
auto-format = true

[[language]]
name = "javascript"
language-servers = [ "typescript-language-server", "tailwindcss-react", "eslint", "emmet-ls", "scls", "graphql"]
formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
indent = { tab-width = 4, unit = "\t" }
auto-format = true

[language-server.graphql]
command = "graphql-lsp" 
args = ["server", "-m", "stream"]
formatter = { command = 'npx', args = ["prettier", "--parser", "json"] }
indent = { tab-width = 4, unit = "\t" }
auto-format = true

[[language]]
name = "json"
language-servers = [ "vscode-json-language-server" ]
formatter = { command = 'npx', args = ["prettier", "--parser", "json"] }
indent = { tab-width = 4, unit = "\t" }
auto-format = true

[[language]]
name = "lua"
indent = { tab-width = 4, unit = "\t" }
auto-format = true

[language-server.vscode-json-language-server.config]
json = { validate = { enable = true }, format = { enable = true } }
provideFormatter = true

[language-server.vscode-css-language-server.config]
css = { validate = { enable = true } }
scss = { validate = { enable = true } }
less = { validate = { enable = true } }
provideFormatter = true

[[language]]
name = "html"
formatter = { command = 'npx', args = ["prettier", "--parser", "html"] }
#language-servers = [ "vscode-html-language-server", "tailwindcss-react", "emmet-ls"]
language-servers = [ "scls", "vscode-html-language-server"]
indent = { tab-width = 4, unit = "\t" }
auto-format = true


[[language]]
name = "css"
formatter = { command = 'npx', args = ["prettier", "--parser", "css"] }
language-servers = [ "vscode-css-language-server", "tailwindcss-react", "emmet-ls"]
auto-format = true

[[language]]
name = "scss"
formatter = { command = "prettier", args = ["--stdin-filepath", "dummy.scss"] }
indent = { tab-width = 4, unit = "\t" }
language-servers = ["vscode-css-language-server"]
auto-format = true


[language-server.emmet-ls]
args = ["--stdio"]
command = "emmet-language-server"

[language-server.eslint]
args = ["--stdio"]
command = "vscode-eslint-language-server"

[language-server.eslint.config]
format = true
nodePath = ""
onIgnoredFiles = "off"
packageManager = "yarn"
quiet = false
rulesCustomizations = []
run = "onType"
useESLintClass = false
validate = "on"
codeAction = { disableRuleComment = { enable = true, location = "separateLine" }, showDocumentation = { enable = true } }
codeActionOnSave = { mode = "all" }
experimental = { }
problems = { shortenToSingleLine = false }
workingDirectory = { mode = "auto" }

[[language]]
name = "git-commit"
language-servers = [ "scls" ]

# introduce a new language to enable completion on any doc by forcing set language with :set-language stub
[[language]]
name = "stub"
scope = "text.stub"
file-types = []
shebangs = []
roots = []
auto-format = false
language-servers = [ "scls" ]

"vim:syntax=vim

autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby compiler ruby

set encoding=UTF-8

" For REPL

" Providers
let g:python_host_prog  = '/usr/local/bin/python2'  " Python 2
let g:python3_host_prog = '/usr/bin/python3'  " Python 3

let g:ruby_host_prog = 'rvm current do neovim-ruby-host'

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
endif
if !exists('g:neocomplete#sources#omni#force_omni_input_patterns')
    let g:neocomplete#sources#omni#force_omni_input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.ruby = '[^.[:digit:] *\t]\%(\.\|->\)'

filetype plugin on
set omnifunc=syntaxcomplete#Complete

set backspace=indent,eol,start
set encoding=utf-8
set mouse=a

autocmd! BufWritePost * Neomake
runtime macros/matchit.vim

" text display
set expandtab "convert tab to space
set nu " line numbers

" Always show the status line
set laststatus=2

" Show trailing white space
match Error '\s\+$'

" Delete trailing white space
nnoremap ,s :%s/\s\+$//e<CR>

" Allow copy to clipboard
set clipboard=unnamed

set cursorline
set cursorcolumn

" Dont create backup file
set nobackup
set noswapfile

" Search highlighting and incremental
set incsearch
set hlsearch

" identation
set smartindent
set tabstop=2
set shiftwidth=2
set expandtab

" Auto indentation for programming
set ai

colorscheme gruvbox
set background=dark
set t_Co=256
set showcmd
set autoindent
set foldenable
set ignorecase
set cursorline
set showmode
set number
set showmatch
syntax on


"If a file change it auto reloads
set autoread

" Indent if we're at the beginning of a line. Else, do completion.
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction

inoremap <expr> <tab> InsertTabWrapper()
inoremap <s-tab> <c-n>

"Open files on the same dir
cnoremap <expr> %% expand('%:h').'/'
map <leader>e :edit %%
map <leader>v :view %%

vnoremap ,e :call ExtractVariable()<cr>

